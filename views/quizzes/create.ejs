<div class="row mb-4">
    <div class="col-md-12">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/quizzes">Quizzes</a></li>
                <li class="breadcrumb-item active" aria-current="page">Create Quiz</li>
            </ol>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Create a New Quiz</h4>
            </div>
            <div class="card-body">
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger"><%= error %></div>
                <% } %>
                
                <form id="create-quiz-form" action="/quizzes/create" method="POST" enctype="multipart/form-data">
                    <!-- Quiz Basic Information -->
                    <div class="mb-4">
                        <h5>Quiz Information</h5>
                        <hr>
                        <div class="mb-3">
                            <label for="title" class="form-label">Quiz Title</label>
                            <input type="text" class="form-control" id="title" name="title" required
                                value="<%= typeof values !== 'undefined' && values.title ? values.title : '' %>">
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3"><%= typeof values !== 'undefined' && values.description ? values.description : '' %></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="category" class="form-label">Category</label>
                                    <select class="form-select" id="category" name="category">
                                        <% const categoryOptions = ['programming', 'networking', 'databases', 'cybersecurity', 'web-development', 'other']; %>
                                        <% categoryOptions.forEach(category => { %>
                                            <option value="<%= category %>" <%= typeof values !== 'undefined' && values.category === category ? 'selected' : '' %>>
                                                <%= category.charAt(0).toUpperCase() + category.slice(1) %>
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="isPublic" class="form-label">Quiz Visibility</label>
                                    <select class="form-select" id="isPublic" name="isPublic">
                                        <option value="true" <%= typeof values !== 'undefined' && values.isPublic === 'true' ? 'selected' : '' %>>Public</option>
                                        <option value="false" <%= typeof values !== 'undefined' && values.isPublic === 'false' ? 'selected' : '' %>>Private</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="tags" class="form-label">Tags (comma separated)</label>
                            <input type="text" class="form-control" id="tags" name="tags" placeholder="e.g. java, programming, algorithms"
                                value="<%= typeof values !== 'undefined' && values.tags ? values.tags : '' %>">
                        </div>
                        <div class="mb-3">
                            <label for="coverImage" class="form-label">Cover Image (optional)</label>
                            <input type="file" class="form-control" id="coverImage" name="coverImage" accept="image/*">
                        </div>
                    </div>
                    
                    <!-- Questions Section -->
                    <div class="mb-4">
                        <h5>Quiz Questions</h5>
                        <hr>
                        <div id="questions-container"></div>
                        
                        <button type="button" class="btn btn-outline-primary w-100 mb-4" id="add-question-btn">Add Question</button>
                    </div>
                    
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">Create Quiz</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const questionsContainer = document.getElementById('questions-container');
    const addQuestionBtn = document.getElementById('add-question-btn');
    const questionTemplate = document.getElementById('question-template');
    let questionCount = 0;
    
    // Function to handle question type changes
    function handleQuestionTypeChange(selectElement) {
        const questionDiv = selectElement.closest('.question-card');
        const questionType = selectElement.value;
        const optionsContainer = questionDiv.querySelector('.options-container');
        const shortAnswerContainer = questionDiv.querySelector('.short-answer-container');
        
        if (questionType === 'short-answer') {
            // Hide option inputs and remove required attribute
            optionsContainer.style.display = 'none';
            // Remove required attribute from all option inputs
            optionsContainer.querySelectorAll('input[type="text"]').forEach(input => {
                input.removeAttribute('required');
            });
            // Show and make short answer required
            shortAnswerContainer.style.display = 'block';
            shortAnswerContainer.querySelector('input').setAttribute('required', '');
        } else {
            // Show options and make them required
            optionsContainer.style.display = 'block';
            optionsContainer.querySelectorAll('input[type="text"]').forEach(input => {
                input.setAttribute('required', '');
            });
            // Hide and make short answer not required
            shortAnswerContainer.style.display = 'none';
            shortAnswerContainer.querySelector('input').removeAttribute('required');
            
            // Ensure we have at least 2 options for multiple-choice or true-false
            const optionsDiv = optionsContainer.querySelector('.options');
            if (optionsDiv.children.length < 2) {
                // Add options if needed
                while (optionsDiv.children.length < 2) {
                    addOption(optionsDiv, optionsDiv.children.length);
                }
            }
            
            // Set true/false values if type is true-false
            if (questionType === 'true-false') {
                const options = optionsDiv.querySelectorAll('.option-row');
                if (options.length >= 2) {
                    options[0].querySelector('input[type="text"]').value = 'True';
                    options[1].querySelector('input[type="text"]').value = 'False';
                    options[0].querySelector('input[type="radio"]').checked = true;
                }
            }
        }
    }
    
    // Function to add a new option to a question
    function addOption(optionsDiv, optionIndex) {
        const questionDiv = optionsDiv.closest('.question-card');
        const questionType = questionDiv.querySelector('.question-type').value;
        const questionIdx = questionDiv.dataset.questionIndex;
        const optionRow = document.createElement('div');
        optionRow.className = 'option-row mb-2 d-flex align-items-center';
        
        const uniqueId = `question_${questionIdx}_option_${optionIndex}`;
        
        optionRow.innerHTML = `
            <div class="form-check me-2">
                <input class="form-check-input" type="radio" name="questions[${questionIdx}].correct_option" value="${optionIndex}" id="${uniqueId}_radio">
            </div>
            <div class="flex-grow-1">
                <input type="text" class="form-control" name="questions[${questionIdx}].options[${optionIndex}].text" placeholder="Option text" ${questionType !== 'short-answer' ? 'required' : ''}>
            </div>
            <button type="button" class="btn btn-danger btn-sm remove-option ms-2">
                <i class="fas fa-trash"></i>
            </button>
        `;
        
        // Add event listener to remove option button
        optionRow.querySelector('.remove-option').addEventListener('click', function() {
            if (optionsDiv.children.length > 2) {
                optionRow.remove();
                // Reindex remaining options
                updateOptionIndices(optionsDiv);
            } else {
                alert('Questions must have at least 2 options');
            }
        });
        
        optionsDiv.appendChild(optionRow);
    }
    
    // Function to update option indices after deletion
    function updateOptionIndices(optionsDiv) {
        const options = optionsDiv.querySelectorAll('.option-row');
        options.forEach((option, idx) => {
            const questionIdx = option.closest('.question-card').dataset.questionIndex;
            const radio = option.querySelector('input[type="radio"]');
            const textInput = option.querySelector('input[type="text"]');
            
            radio.name = `questions[${questionIdx}].correct_option`;
            radio.value = idx;
            radio.id = `question_${questionIdx}_option_${idx}_radio`;
            
            textInput.name = `questions[${questionIdx}].options[${idx}].text`;
        });
    }
    
    // Function to add a new question to the form
    function addQuestion() {
        const questionDiv = questionTemplate.content.cloneNode(true).querySelector('.question-card');
        questionDiv.dataset.questionIndex = questionCount;
        
        // Update all name and id attributes with the current question index
        questionDiv.querySelectorAll('[name], [for]').forEach(el => {
            if (el.hasAttribute('name')) {
                el.setAttribute('name', el.getAttribute('name').replace('[index]', `[${questionCount}]`));
            }
            if (el.hasAttribute('for')) {
                el.setAttribute('for', el.getAttribute('for').replace('index', questionCount));
            }
        });
        
        // Add initial options for multiple-choice
        const optionsDiv = questionDiv.querySelector('.options');
        addOption(optionsDiv, 0);
        addOption(optionsDiv, 1);
        
        // Set up add option button
        questionDiv.querySelector('.add-option-btn').addEventListener('click', function() {
            const optionsDiv = this.closest('.question-card').querySelector('.options');
            addOption(optionsDiv, optionsDiv.children.length);
        });
        
        // Set up question type change event
        questionDiv.querySelector('.question-type').addEventListener('change', function() {
            handleQuestionTypeChange(this);
        });
        
        // Initially hide short answer container and make it not required
        const shortAnswerContainer = questionDiv.querySelector('.short-answer-container');
        shortAnswerContainer.style.display = 'none';
        shortAnswerContainer.querySelector('input').removeAttribute('required');
        
        // Set up remove question button
        questionDiv.querySelector('.remove-question-btn').addEventListener('click', function() {
            if (document.querySelectorAll('.question-card').length > 1) {
                questionDiv.remove();
                // Update question indices
                updateQuestionIndices();
            } else {
                alert('Quiz must have at least one question');
            }
        });
        
        // Set placeholder for short answer
        questionDiv.querySelector('.correct-answer-input').setAttribute('placeholder', 'Enter the correct answer');
        
        // Add the question to the container
        questionsContainer.appendChild(questionDiv);
        questionCount++;
    }
    
    // Function to update question indices after deletion
    function updateQuestionIndices() {
        const questions = document.querySelectorAll('.question-card');
        questions.forEach((question, idx) => {
            question.dataset.questionIndex = idx;
            
            question.querySelectorAll('[name], [for]').forEach(el => {
                if (el.hasAttribute('name')) {
                    el.setAttribute('name', el.getAttribute('name').replace(/questions\[\d+\]/g, `questions[${idx}]`));
                }
                if (el.hasAttribute('for')) {
                    el.setAttribute('for', el.getAttribute('for').replace(/question_\d+/g, `question_${idx}`));
                }
            });
            
            // Update option indices as well
            const optionsDiv = question.querySelector('.options');
            updateOptionIndices(optionsDiv);
        });
    }
    
    // Add first question on page load
    addQuestion();
    
    // Set up add question button
    addQuestionBtn.addEventListener('click', addQuestion);
    
    // Add form submit handler to validate the form and package questions
    document.getElementById('create-quiz-form').addEventListener('submit', function(e) {
        // Prevent default submission to process questions
        e.preventDefault();
        const form = this;

        // Basic validation (can be expanded)
        let validationPassed = true;
        document.querySelectorAll('.question-card').forEach(questionDiv => {
            const questionType = questionDiv.querySelector('.question-type').value;
            const optionsInputs = questionDiv.querySelectorAll('.options-container input[type="text"]');
            const shortAnswerInput = questionDiv.querySelector('.short-answer-container input.correct-answer-input');
            
            if (questionType === 'short-answer') {
                if (shortAnswerInput && !shortAnswerInput.value.trim() && shortAnswerInput.hasAttribute('required')) {
                    console.warn('Correct answer for short-answer questions cannot be empty.');
                    validationPassed = false; 
                }
            } else { // multiple-choice or true-false
                const radioButtons = questionDiv.querySelectorAll('.options-container input[type="radio"]');
                const isAnyCorrect = Array.from(radioButtons).some(rb => rb.checked);
                if (!isAnyCorrect && radioButtons.length > 0) {
                    console.warn('Please select a correct answer for each multiple-choice/true-false question.');
                    // validationPassed = false; // Decided to allow submission and let server handle if needed
                }
                optionsInputs.forEach(input => {
                    if (input.hasAttribute('required') && !input.value.trim()) {
                        console.warn('Option text cannot be empty.');
                        validationPassed = false;
                    }
                });
            }
        });

        if (!validationPassed) {
            alert('Please check all fields, some required information is missing or invalid.');
            return; 
        }

        // Package questions into JSON
        const questionsData = [];
        document.querySelectorAll('.question-card').forEach((questionCard) => {
            const questionTextValue = questionCard.querySelector('textarea[name$=".text"]').value;
            const questionType = questionCard.querySelector('select.question-type').value;
            const points = questionCard.querySelector('input[name$=".points"]').value;
            const timeLimitInp = questionCard.querySelector('input[name$=".timeLimit"]').value; // Changed to timeLimit

            const questionObj = {
                questionText: questionTextValue, 
                type: questionType,
                points: parseInt(points) || 10,
                timeLimit: parseInt(timeLimitInp) || 30, // Changed to timeLimit
            };

            if (questionType === 'short-answer') {
                questionObj.correct_answer = questionCard.querySelector('input.correct-answer-input').value;
                questionObj.options = [];
            } else { 
                const options = [];
                let correctOptionIndex = -1;
                questionCard.querySelectorAll('.option-row').forEach((optionRow, optIdx) => {
                    const optionTextInput = optionRow.querySelector('input[type="text"]');
                    const radioInput = optionRow.querySelector('input[type="radio"]');
                    
                    options.push({ text: optionTextInput ? optionTextInput.value : "" });
                    if (radioInput && radioInput.checked) {
                        correctOptionIndex = optIdx;
                    }
                });
                questionObj.options = options;
                questionObj.correct_option = correctOptionIndex !== -1 ? correctOptionIndex.toString() : null;
            }
            questionsData.push(questionObj);
        });

        let hiddenInput = form.querySelector('input[name="questions"]');
        if (!hiddenInput) {
            hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'questions';
            form.appendChild(hiddenInput);
        }
        hiddenInput.value = JSON.stringify(questionsData);

        // Disable original question fields to prevent them from being submitted individually,
        // ensuring only the JSON payload for 'questions' is sent for structured data.
        // File inputs (e.g., questionImage_0) are not affected as their names don't start with "questions[".
        document.querySelectorAll('.question-card').forEach(questionCard => {
            questionCard.querySelectorAll(
                'textarea[name^="questions["],' +
                'select[name^="questions["],' +
                'input[type="number"][name^="questions["],' +
                'input[type="text"][name^="questions["],' +
                'input[type="radio"][name^="questions["]'
            ).forEach(inp => {
                if (inp.name && inp.name.startsWith("questions[")) {
                     inp.disabled = true;
                }
            });
        });
        
        form.submit();
    });
});
</script>

<template id="question-template">
    <div class="question-card card mb-4" data-question-index="index">
        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Question</h5>
            <button type="button" class="btn btn-sm btn-danger remove-question-btn">
                <i class="fas fa-trash"></i> Remove
            </button>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="question_index_text" class="form-label">Question Text</label>
                <textarea class="form-control" id="question_index_text" name="questions[index].text" rows="2" placeholder="Enter your question here" required></textarea>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="question_index_type" class="form-label">Question Type</label>
                    <select class="form-select question-type" id="question_index_type" name="questions[index].type" required>
                        <option value="multiple-choice">Multiple Choice</option>
                        <option value="true-false">True/False</option>
                        <option value="short-answer">Short Answer</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="question_index_points" class="form-label">Points</label>
                    <input type="number" class="form-control" id="question_index_points" name="questions[index].points" min="1" value="10" required>
                </div>
                <div class="col-md-3">
                    <label for="question_index_timeLimit" class="form-label">Time (seconds)</label> <!-- Changed ID and FOR -->
                    <input type="number" class="form-control" id="question_index_timeLimit" name="questions[index].timeLimit" min="5" max="300" value="30" required> <!-- Changed NAME and ID -->
                </div>
            </div>
            
            <div class="mb-3">
                <label class="form-label">Question Image (optional)</label>
                <input type="file" class="form-control" name="questionImage_[index]" accept="image/*"> <!-- Changed name to questionImage_[index] -->
                <div class="mt-2">
                    <img class="question-image-preview" style="display: none; max-height: 200px;">
                </div>
            </div>
            
            <div class="options-container">
                <label class="form-label">Answer Options (select the correct one)</label>
                <div class="options mb-2">
                    <!-- Options will be added here -->
                </div>
                
                <button type="button" class="btn btn-secondary add-option-btn">
                    <i class="fas fa-plus"></i> Add Option
                </button>
            </div>
            
            <div class="short-answer-container" style="display: none;">
                <label for="question_index_correct_answer" class="form-label">Correct Answer</label>
                <input type="text" class="form-control correct-answer-input" id="question_index_correct_answer" name="questions[index].correct_answer" placeholder="Enter the correct answer">
                <small class="form-text text-muted">For short answer questions, provide the expected answer.</small>
            </div>
        </div>
    </div>
</template>
